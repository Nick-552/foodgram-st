name: Foodgram workflow

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r backend/requirements.txt

      - name: Test with flake8
        run: |
          flake8 backend/

  build_and_push_to_docker_hub:
    name: Push Docker images to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Backend to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest

      - name: Push Frontend to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Executing remote SSH commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest
            
            cd foodgram/infra
            
            # Backup env file if it exists
            [ -f .env ] && cp .env .env.backup
            
            # Create .env file
            echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" > .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            
            # Stop and remove old containers
            sudo docker-compose down
            
            # Update docker-compose.yml to use the new images
            sed -i 's|build:|image: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest #|' docker-compose.yml
            sed -i 's|context: ../backend||' docker-compose.yml
            sed -i 's|dockerfile: Dockerfile||' docker-compose.yml
            
            sed -i 's|build:|image: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest #|' docker-compose.yml
            sed -i 's|context: ../frontend||' docker-compose.yml
            sed -i 's|dockerfile: Dockerfile||' docker-compose.yml
            
            # Start containers with new images
            sudo docker-compose up -d
            
            # Apply migrations and collect static
            sudo docker-compose exec -T backend python manage.py migrate
            sudo docker-compose exec -T backend python manage.py collectstatic --no-input 